name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      pre_release:
        description: 'Pre-release version'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18.x'

jobs:
  # 📋 Release Preparation
  prepare-release:
    name: 📋 Prepare Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏷️ Calculate new version
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        VERSION_TYPE="${{ github.event.inputs.version_type }}"
        PRE_RELEASE="${{ github.event.inputs.pre_release }}"
        
        echo "Current version: $CURRENT_VERSION"
        
        # Use npm version to calculate new version
        if [ "$PRE_RELEASE" = "true" ]; then
          NEW_VERSION=$(npm version --no-git-tag-version pre$VERSION_TYPE)
        else
          NEW_VERSION=$(npm version --no-git-tag-version $VERSION_TYPE)
        fi
        
        # Remove 'v' prefix from version
        NEW_VERSION=${NEW_VERSION#v}
        
        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: 📝 Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Generate changelog
        CHANGELOG="## 🚀 What's Changed\n\n$COMMITS"
        
        # Save changelog to file for multi-line output
        echo -e "$CHANGELOG" > changelog.txt
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🏷️ Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        git add package.json package-lock.json
        git commit -m "chore: bump version to v$NEW_VERSION"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin main --tags

  # 🏗️ Build Release Artifacts
  build-release:
    name: 🏗️ Build Release
    runs-on: ubuntu-latest
    needs: prepare-release
    if: always() && (github.event_name == 'push' || needs.prepare-release.result == 'success')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🧪 Run tests
      run: |
        npm run test:coverage
        npm run test:e2e

    - name: 🏗️ Build application
      run: |
        NODE_ENV=production npm run build
        
        # Create build archive
        tar -czf kamba-lhains-build.tar.gz .next public package.json

    - name: 📊 Generate build report
      run: |
        echo "# 🏗️ Build Report" > build-report.md
        echo "" >> build-report.md
        echo "## Build Information" >> build-report.md
        echo "- Build date: $(date)" >> build-report.md
        echo "- Node.js version: $(node --version)" >> build-report.md
        echo "- npm version: $(npm --version)" >> build-report.md
        echo "" >> build-report.md
        
        echo "## Build Size" >> build-report.md
        echo "- Total build size: $(du -sh .next | cut -f1)" >> build-report.md
        echo "- Static files: $(find .next/static -type f | wc -l) files" >> build-report.md
        echo "- Pages: $(find .next/server/pages -name "*.html" | wc -l) pages" >> build-report.md
        echo "" >> build-report.md
        
        echo "## Dependencies" >> build-report.md
        echo "- Production dependencies: $(cat package.json | jq '.dependencies | length')" >> build-report.md
        echo "- Dev dependencies: $(cat package.json | jq '.devDependencies | length')" >> build-report.md

    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-build
        path: |
          kamba-lhains-build.tar.gz
          build-report.md

  # 🚀 Create GitHub Release
  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release]
    if: always() && (github.event_name == 'push' || needs.prepare-release.result == 'success')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-build

    - name: 🏷️ Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ needs.prepare-release.outputs.new_version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: 📝 Prepare release notes
      id: release_notes
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        
        if [ -f "build-report.md" ]; then
          BUILD_REPORT=$(cat build-report.md)
        else
          BUILD_REPORT="Build report not available."
        fi
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          CHANGELOG="${{ needs.prepare-release.outputs.changelog }}"
        else
          # Generate changelog from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG="## 🚀 What's Changed\n\nInitial release"
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
            CHANGELOG="## 🚀 What's Changed\n\n$COMMITS"
          fi
        fi
        
        # Combine changelog and build report
        RELEASE_NOTES="$CHANGELOG\n\n---\n\n$BUILD_REPORT"
        
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo -e "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🚀 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        body: |
          ${{ steps.release_notes.outputs.release_notes }}
          
          ## 📦 Installation
          
          ```bash
          # Clone the repository
          git clone https://github.com/${{ github.repository }}.git
          cd kamba-lhains
          
          # Checkout this release
          git checkout v${{ steps.get_version.outputs.version }}
          
          # Install dependencies
          npm install
          
          # Build and start
          npm run build
          npm start
          ```
          
          ## 🔗 Links
          
          - [Live Demo](https://kamba-lhains.vercel.app)
          - [Documentation](https://github.com/${{ github.repository }}#readme)
          - [Issue Tracker](https://github.com/${{ github.repository }}/issues)
        draft: false
        prerelease: ${{ github.event.inputs.pre_release == 'true' }}

    - name: 📦 Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./kamba-lhains-build.tar.gz
        asset_name: kamba-lhains-v${{ steps.get_version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  # 🚀 Deploy Release
  deploy-release:
    name: 🚀 Deploy Release
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    environment:
      name: production
      url: https://kamba-lhains.vercel.app
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Vercel CLI
      run: npm install -g vercel@latest

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-build

    - name: 📦 Extract build
      run: tar -xzf kamba-lhains-build.tar.gz

    - name: 🚀 Deploy to Production
      run: |
        vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_ENV

    - name: 🧪 Post-deployment validation
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Health checks
        curl -f "${{ env.deployment_url }}" || exit 1
        curl -f "${{ env.deployment_url }}/api/products" || exit 1
        
        echo "✅ Deployment validation successful"

  # 📢 Post-Release Actions
  post-release:
    name: 📢 Post-Release
    runs-on: ubuntu-latest
    needs: [deploy-release]
    if: success()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Get release version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ needs.prepare-release.outputs.new_version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: 📢 Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#releases'
        text: |
          🚀 **New Release: v${{ steps.version.outputs.version }}**
          
          ✅ Successfully deployed to production
          🔗 https://kamba-lhains.vercel.app
          📋 Release notes: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 📧 Email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "🚀 Kamba Lhains v${{ steps.version.outputs.version }} Released"
        body: |
          Hello!
          
          A new version of Kamba Lhains has been released and deployed:
          
          Version: v${{ steps.version.outputs.version }}
          Release Date: $(date)
          Live URL: https://kamba-lhains.vercel.app
          
          View the full release notes: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}
          
          Best regards,
          The Kamba Lhains Team
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}

    - name: 🎉 Release summary
      run: |
        echo "## 🎉 Release v${{ steps.version.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Build successful" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Tests passed" >> $GITHUB_STEP_SUMMARY  
        echo "- ✅ Release created" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Deployed to production" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Notifications sent" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Live Site](https://kamba-lhains.vercel.app)" >> $GITHUB_STEP_SUMMARY
        echo "- [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY