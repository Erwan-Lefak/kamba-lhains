name: Dependency Management & Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to apply'
        required: true
        default: 'minor'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  NODE_VERSION: '18.x'

jobs:
  # 🔍 Dependency Audit
  dependency-audit:
    name: 🔍 Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Security audit
      run: |
        npm audit --json > audit-results.json || true
        
        # Generate human-readable report
        npm audit > audit-report.txt || true
        
        # Check for critical issues
        CRITICAL=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0')
        HIGH=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.high // 0')
        
        echo "## 🔍 Security Audit Results" >> $GITHUB_STEP_SUMMARY
        echo "- Critical vulnerabilities: $CRITICAL" >> $GITHUB_STEP_SUMMARY
        echo "- High vulnerabilities: $HIGH" >> $GITHUB_STEP_SUMMARY
        
        if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
          echo "⚠️ Security vulnerabilities found. Consider updating dependencies." >> $GITHUB_STEP_SUMMARY
        fi

    - name: 📊 Dependency analysis
      run: |
        # Analyze outdated packages
        npm outdated --json > outdated.json || true
        
        # Count outdated packages
        OUTDATED_COUNT=$(cat outdated.json | jq 'length // 0')
        echo "Outdated packages: $OUTDATED_COUNT" >> $GITHUB_STEP_SUMMARY
        
        # License check
        npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' || true

    - name: 📦 Upload audit results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-audit
        path: |
          audit-results.json
          audit-report.txt
          outdated.json

  # 🔄 Automated Updates
  dependency-updates:
    name: 🔄 Dependency Updates
    runs-on: ubuntu-latest
    needs: dependency-audit
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔄 Update dependencies
      run: |
        UPDATE_TYPE="${{ github.event.inputs.update_type || 'minor' }}"
        
        case $UPDATE_TYPE in
          "patch")
            # Update only patch versions
            npx npm-check-updates -u --target patch
            ;;
          "minor")
            # Update patch and minor versions
            npx npm-check-updates -u --target minor
            ;;
          "major")
            # Update all versions (with caution)
            npx npm-check-updates -u
            ;;
        esac
        
        # Install updated dependencies
        npm install
        
        # Run tests to ensure nothing breaks
        npm run test || exit 1
        npm run build || exit 1

    - name: 📋 Generate update report
      run: |
        git diff --name-only > changed-files.txt
        
        if [ -s changed-files.txt ]; then
          echo "## 🔄 Dependency Updates Applied" >> update-report.md
          echo "" >> update-report.md
          echo "### Changed Files:" >> update-report.md
          cat changed-files.txt >> update-report.md
          echo "" >> update-report.md
          
          echo "### Package Changes:" >> update-report.md
          git diff package.json >> update-report.md || true
        else
          echo "No dependency updates available." >> update-report.md
        fi

    - name: 📤 Create Pull Request
      uses: peter-evans/create-pull-request@v5
      if: success()
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: '🔄 Automated Dependency Updates'
        body-path: update-report.md
        branch: automated-dependency-updates
        delete-branch: true
        labels: |
          dependencies
          automated
        reviewers: |
          ${{ github.repository_owner }}

  # 🏗️ Build Matrix Testing
  compatibility-test:
    name: 🏗️ Node.js Compatibility
    runs-on: ubuntu-latest
    needs: dependency-updates
    if: always()
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🧪 Run tests
      run: |
        npm run test
        npm run build
      continue-on-error: true

    - name: 📊 Report compatibility
      run: |
        echo "Node.js ${{ matrix.node-version }}: ✅ Compatible" >> $GITHUB_STEP_SUMMARY

  # 🔒 Security Updates
  security-updates:
    name: 🔒 Security Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔒 Apply security updates
      run: |
        # Try to fix security vulnerabilities automatically
        npm audit fix || true
        
        # Generate security report
        npm audit --json > security-audit.json || true
        
        VULNERABILITIES=$(cat security-audit.json | jq -r '.metadata.vulnerabilities.total // 0')
        
        if [ $VULNERABILITIES -gt 0 ]; then
          echo "## 🔒 Security Updates Applied" >> security-report.md
          echo "" >> security-report.md
          echo "Remaining vulnerabilities: $VULNERABILITIES" >> security-report.md
          echo "" >> security-report.md
          echo "### Detailed Report:" >> security-report.md
          npm audit >> security-report.md || true
        else
          echo "## 🔒 No Security Issues Found" >> security-report.md
          echo "" >> security-report.md
          echo "All dependencies are secure!" >> security-report.md
        fi

    - name: 🧪 Test after security updates
      run: |
        npm run test || exit 1
        npm run build || exit 1

    - name: 📤 Create Security PR
      uses: peter-evans/create-pull-request@v5
      if: success()
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'security: fix vulnerabilities'
        title: '🔒 Security Updates - Automated Fix'
        body-path: security-report.md
        branch: security-updates
        delete-branch: true
        labels: |
          security
          automated
          priority-high
        reviewers: |
          ${{ github.repository_owner }}

  # 📊 Dependency Health Report
  health-report:
    name: 📊 Dependency Health
    runs-on: ubuntu-latest
    needs: [dependency-audit, compatibility-test]
    if: always()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 📊 Generate health report
      run: |
        echo "# 📊 Dependency Health Report" > health-report.md
        echo "" >> health-report.md
        echo "Generated on: $(date)" >> health-report.md
        echo "" >> health-report.md
        
        # Package count
        TOTAL_DEPS=$(cat package.json | jq '.dependencies | length')
        DEV_DEPS=$(cat package.json | jq '.devDependencies | length')
        echo "## 📦 Package Statistics" >> health-report.md
        echo "- Total dependencies: $TOTAL_DEPS" >> health-report.md
        echo "- Dev dependencies: $DEV_DEPS" >> health-report.md
        echo "" >> health-report.md
        
        # Size analysis
        echo "## 📏 Bundle Analysis" >> health-report.md
        npm run build > /dev/null 2>&1 || true
        if [ -d ".next" ]; then
          BUNDLE_SIZE=$(du -sh .next | cut -f1)
          echo "- Build size: $BUNDLE_SIZE" >> health-report.md
        fi
        echo "" >> health-report.md
        
        # License summary
        echo "## 📜 License Summary" >> health-report.md
        npx license-checker --summary >> health-report.md || true
        echo "" >> health-report.md
        
        # Outdated packages
        echo "## ⏰ Outdated Packages" >> health-report.md
        npm outdated >> health-report.md || echo "All packages are up to date!" >> health-report.md

    - name: 📤 Upload health report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-health-report
        path: health-report.md

    - name: 💬 Comment on main branch
      uses: actions/github-script@v6
      if: github.ref == 'refs/heads/main'
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('health-report.md', 'utf8');
          
          // Find existing report comment
          const { data: comments } = await github.rest.repos.listCommentsForCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('Dependency Health Report')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.repos.updateCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: report
            });
          } else {
            // Create new comment  
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: report
            });
          }